#!/usr/bin/env bash
# Usage: nem update [nemesis|nem]
# Summary: Updates the nemesis environment.
# Help: Available packages
#
# nemesis:
#   Updates all parts of the nemesis environment.
#     - downloads the latest nemesis manifest (sprinter config)
#     - fetches git changes
#     - updates npm dependencies
#     - updates python dependencies
#     - updates packaged dependencies (brew / apt-get)
#     - updates the nemesis database (regenerate_db / migrations)
#
# nem:
#   Updates just the nem sub-commands

set -e

NL=$'\n'

# provide nem completions
if [ "$1" == "--complete" ]; then
    echo "nemesis nem"
    exit
fi

if [ "$1" == "nemesis" ]; then
    echo "Updating Nemesis environment from $NEMESIS_SRC_ROOT/nemesis-manifest.cfg"

    # Ensuring we stay sandboxed by resetting PYTHONPATH
    schema_md5=$(md5 -q $NEMESIS_SRC_ROOT/nemesis/database/schema.py)
    # PYTHONPATH='' sprinter update nemesis
    # shift
    # exec "PYTHONPATH='' sprinter install $NEMESIS_SRC_ROOT/nemesis-manifest.cfg '$@'"
    PYTHONPATH='' sprinter update nemesis
    new_schema_md5=$(md5 -q $NEMESIS_SRC_ROOT/nemesis/database/schema.py)
    if [[ $schema_md5 != $new_schema_md5 ]]; then
        echo
        echo "Nemesis database schema has been updated"
        echo "========= Regenerating database ========"
        nem re-db
    fi
    exit 0
elif [ "$1" == "nem" ]; then
    echo "Updating nem sub-commands"
    git -C $_NEM_ROOT stash
    git -C $_NEM_ROOT pull --rebase
    git -C $_NEM_ROOT stash pop
elif [ -n "$1" ]; then
    echo "${NL}Invalid package: '$1'"
else
    echo "${NL}Did you mean?    nem update nemesis${NL}${NL}"
    nem help update
fi
